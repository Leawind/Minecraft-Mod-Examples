plugins {
	// https://github.com/GradleUp/shadow/releases
	id "com.gradleup.shadow" version "8.3.5"
}

architectury {
	platformSetupLoomIde()
	fabric()
}

loom {
	accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

dependencies {
	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
	
	modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
}

processResources {
	inputs.property "version", project.version
	
	eachFile { expand rootProject.properties }
}

shadowJar {
	exclude "architectury.common.json"
	
	configurations = [project.configurations.shadowCommon]
	archiveClassifier = "dev-shadow"
}

remapJar {
	injectAccessWidener = true
	inputFile.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier = null
}

jar {
	archiveClassifier = "dev"
}

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}
